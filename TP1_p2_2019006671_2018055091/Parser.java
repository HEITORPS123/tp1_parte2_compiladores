
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\006\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\011\000" +
    "\002\002\010\000\002\002\005\000\002\002\005\000\002" +
    "\002\010\000\002\002\006\000\002\002\006\000\002\002" +
    "\012\000\002\002\003\000\002\002\007\000\002\003\004" +
    "\000\002\003\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\006\000\002\006\003\000\002" +
    "\006\010\000\002\006\005\000\002\007\006\000\002\007" +
    "\002\000\002\010\007\000\002\010\002\000\002\011\006" +
    "\000\002\011\010\000\002\012\011\000\002\012\013\000" +
    "\002\013\005\000\002\013\006\000\002\013\005\000\002" +
    "\013\006\000\002\014\003\000\002\015\004\000\002\015" +
    "\002\000\002\016\005\000\002\016\002\000\002\017\004" +
    "\000\002\017\002\000\002\020\005\000\002\020\002\000" +
    "\002\021\007\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\070\002\ufffc\006\ufffc\007\ufffc\012\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\022\ufffc\023\ufffc\024\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\051\ufffc\053\ufffc" +
    "\056\ufffc\060\ufffc\062\ufffc\001\002\000\004\063\216\001" +
    "\002\000\032\005\014\010\004\011\007\014\016\020\021" +
    "\021\011\034\005\055\010\056\uffcb\063\015\064\006\065" +
    "\013\001\002\000\070\002\ufffe\006\ufffe\007\ufffe\012\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\022\ufffe\023\ufffe\024\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\051\ufffe\053" +
    "\ufffe\056\ufffe\060\ufffe\062\ufffe\001\002\000\034\002\213" +
    "\033\026\034\032\035\034\036\037\037\040\040\035\041" +
    "\031\042\033\043\036\044\030\045\027\046\041\001\002" +
    "\000\070\002\ufffb\006\ufffb\007\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\022\ufffb\023\ufffb\024\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\051\ufffb\053\ufffb\056\ufffb" +
    "\060\ufffb\062\ufffb\001\002\000\030\005\014\010\004\011" +
    "\007\014\016\020\021\021\011\034\005\055\010\063\015" +
    "\064\006\065\013\001\002\000\102\002\uffcd\006\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055\176\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\001\002\000\012\015\uffe1" +
    "\022\112\023\105\024\113\001\002\000\100\002\uffff\006" +
    "\uffff\007\uffff\012\uffff\013\uffff\015\uffff\016\uffff\022\uffff" +
    "\023\uffff\024\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\050\064\051\uffff\053\uffff\054\063\056\uffff\057" +
    "\062\060\uffff\061\061\062\uffff\001\002\000\076\002\001" +
    "\006\001\007\001\012\001\013\001\015\001\016\001\022" +
    "\001\023\001\024\001\033\001\034\001\035\001\036\001" +
    "\037\001\040\001\041\001\042\001\043\001\044\001\045" +
    "\001\046\001\050\024\051\001\053\001\054\023\056\001" +
    "\057\022\060\001\062\001\001\002\000\070\002\uffe4\006" +
    "\uffe4\007\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\051\uffe4\053\uffe4\056\uffe4\060\uffe4\062\uffe4\001" +
    "\002\000\030\005\014\010\004\011\007\014\016\020\021" +
    "\021\011\034\005\055\010\063\015\064\006\065\013\001" +
    "\002\000\004\063\056\001\002\000\030\005\014\010\004" +
    "\011\007\014\016\020\021\021\011\034\005\055\010\063" +
    "\015\064\006\065\013\001\002\000\070\002\uffea\006\uffea" +
    "\007\uffea\012\uffea\013\uffea\015\uffea\016\uffea\022\uffea\023" +
    "\uffea\024\uffea\033\026\034\032\035\034\036\037\037\040" +
    "\040\035\041\031\042\033\043\036\044\030\045\027\046" +
    "\041\051\uffea\053\uffea\056\uffea\060\uffea\062\uffea\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\030\005\014\010\004\011\007\014\016\020\021\021" +
    "\011\034\005\055\010\063\015\064\006\065\013\001\002" +
    "\000\070\002\uffed\006\uffed\007\uffed\012\uffed\013\uffed\015" +
    "\uffed\016\uffed\022\uffed\023\uffed\024\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\051\uffed\053\uffed\056\uffed" +
    "\060\uffed\062\uffed\001\002\000\070\002\ufff4\006\ufff4\007" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\051\ufff4\053\ufff4\056\ufff4\060\ufff4\062\ufff4\001\002\000" +
    "\070\002\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\022\ufff5\023\ufff5\024\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\051\ufff5\053\ufff5\056\ufff5\060" +
    "\ufff5\062\ufff5\001\002\000\070\002\uffef\006\uffef\007\uffef" +
    "\012\uffef\013\uffef\015\uffef\016\uffef\022\uffef\023\uffef\024" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\051" +
    "\uffef\053\uffef\056\uffef\060\uffef\062\uffef\001\002\000\070" +
    "\002\ufff3\006\ufff3\007\ufff3\012\ufff3\013\ufff3\015\ufff3\016" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\051\ufff3\053\ufff3\056\ufff3\060\ufff3" +
    "\062\ufff3\001\002\000\070\002\ufff6\006\ufff6\007\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\051\ufff6" +
    "\053\ufff6\056\ufff6\060\ufff6\062\ufff6\001\002\000\070\002" +
    "\ufff2\006\ufff2\007\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\051\ufff2\053\ufff2\056\ufff2\060\ufff2\062" +
    "\ufff2\001\002\000\070\002\ufff7\006\ufff7\007\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\022\ufff7\023\ufff7\024\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051\ufff7\053" +
    "\ufff7\056\ufff7\060\ufff7\062\ufff7\001\002\000\070\002\ufff1" +
    "\006\ufff1\007\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\051\ufff1\053\ufff1\056\ufff1\060\ufff1\062\ufff1" +
    "\001\002\000\070\002\ufff0\006\ufff0\007\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\022\ufff0\023\ufff0\024\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\051\ufff0\053\ufff0" +
    "\056\ufff0\060\ufff0\062\ufff0\001\002\000\070\002\uffee\006" +
    "\uffee\007\uffee\012\uffee\013\uffee\015\uffee\016\uffee\022\uffee" +
    "\023\uffee\024\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\051\uffee\053\uffee\056\uffee\060\uffee\062\uffee\001" +
    "\002\000\070\002\ufff8\006\ufff8\007\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\016\ufff8\022\ufff8\023\ufff8\024\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\051\ufff8\053\ufff8\056" +
    "\ufff8\060\ufff8\062\ufff8\001\002\000\076\002\uffd1\006\uffd1" +
    "\007\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\062\uffd1\001\002\000\034\033\026\034\032\035" +
    "\034\036\037\037\040\040\035\041\031\042\033\043\036" +
    "\044\030\045\027\046\041\060\060\001\002\000\076\002" +
    "\uffd0\006\uffd0\007\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\062\uffd0\001\002\000\004\063\073" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\004\063\066\001\002\000\030\005\014\010" +
    "\004\011\007\014\016\020\021\021\011\034\005\055\010" +
    "\063\015\064\006\065\013\001\002\000\070\002\uffe9\006" +
    "\uffe9\007\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\033\026\034\032\035\034\036\037\037" +
    "\040\040\035\041\031\042\033\043\036\044\030\045\027" +
    "\046\041\051\uffe9\053\uffe9\056\uffe9\060\uffe9\062\uffe9\001" +
    "\002\000\076\002\uffcf\006\uffcf\007\uffcf\012\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\022\uffcf\023\uffcf\024\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\001\002" +
    "\000\034\033\026\034\032\035\034\036\037\037\040\040" +
    "\035\041\031\042\033\043\036\044\030\045\027\046\041" +
    "\060\070\001\002\000\100\002\uffce\006\uffce\007\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\071\022\uffce\023\uffce" +
    "\024\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\050\uffce\051\uffce\053\uffce\054\uffce\056\uffce\057\uffce\060" +
    "\uffce\062\uffce\001\002\000\030\005\014\010\004\011\007" +
    "\014\016\020\021\021\011\034\005\055\010\063\015\064" +
    "\006\065\013\001\002\000\070\002\uffeb\006\uffeb\007\uffeb" +
    "\012\uffeb\013\uffeb\015\uffeb\016\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\033\026\034\032\035\034\036\037\037\040\040\035" +
    "\041\031\042\033\043\036\044\030\045\027\046\041\051" +
    "\uffeb\053\uffeb\056\uffeb\060\uffeb\062\uffeb\001\002\000\004" +
    "\037\074\001\002\000\030\005\014\010\004\011\007\014" +
    "\016\020\021\021\011\034\005\055\010\063\015\064\006" +
    "\065\013\001\002\000\036\033\026\034\032\035\034\036" +
    "\037\037\040\040\035\041\031\042\033\043\036\044\030" +
    "\045\027\046\041\051\077\062\uffc3\001\002\000\004\062" +
    "\104\001\002\000\004\063\100\001\002\000\004\037\101" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\036\033\026\034\032\035\034\036\037\037" +
    "\040\040\035\041\031\042\033\043\036\044\030\045\027" +
    "\046\041\051\077\062\uffc3\001\002\000\004\062\uffc4\001" +
    "\002\000\070\002\uffec\006\uffec\007\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\022\uffec\023\uffec\024\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\051\uffec\053\uffec\056" +
    "\uffec\060\uffec\062\uffec\001\002\000\004\063\167\001\002" +
    "\000\012\015\uffe0\022\uffe0\023\uffe0\024\uffe0\001\002\000" +
    "\012\015\uffdf\022\uffdf\023\uffdf\024\uffdf\001\002\000\004" +
    "\015\157\001\002\000\012\015\uffde\022\uffde\023\uffde\024" +
    "\uffde\001\002\000\004\063\141\001\002\000\004\063\116" +
    "\001\002\000\012\015\uffe1\022\112\023\105\024\113\001" +
    "\002\000\004\015\uffe2\001\002\000\004\037\117\001\002" +
    "\000\010\004\123\061\122\063\121\001\002\000\012\015" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\001\002\000\012\015\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\001\002\000\004\063\126\001" +
    "\002\000\004\017\124\001\002\000\004\063\125\001\002" +
    "\000\012\015\uffda\022\uffda\023\uffda\024\uffda\001\002\000" +
    "\004\052\127\001\002\000\004\063\130\001\002\000\014" +
    "\037\uffcd\050\uffcd\051\uffcd\056\uffcd\062\uffcd\001\002\000" +
    "\006\051\133\062\uffd6\001\002\000\004\062\140\001\002" +
    "\000\004\063\134\001\002\000\004\052\135\001\002\000" +
    "\004\063\130\001\002\000\010\051\133\056\uffd6\062\uffd6" +
    "\001\002\000\006\056\uffd7\062\uffd7\001\002\000\012\015" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\001\002\000\004\055\142" +
    "\001\002\000\006\056\uffd8\063\143\001\002\000\004\052" +
    "\154\001\002\000\004\056\145\001\002\000\006\037\146" +
    "\052\147\001\002\000\030\005\014\010\004\011\007\014" +
    "\016\020\021\021\011\034\005\055\010\063\015\064\006" +
    "\065\013\001\002\000\004\063\130\001\002\000\004\037" +
    "\151\001\002\000\030\005\014\010\004\011\007\014\016" +
    "\020\021\021\011\034\005\055\010\063\015\064\006\065" +
    "\013\001\002\000\042\015\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\033\026\034\032\035\034\036\037\037\040\040\035\041" +
    "\031\042\033\043\036\044\030\045\027\046\041\001\002" +
    "\000\042\015\uffd3\022\uffd3\023\uffd3\024\uffd3\033\026\034" +
    "\032\035\034\036\037\037\040\040\035\041\031\042\033" +
    "\043\036\044\030\045\027\046\041\001\002\000\004\063" +
    "\130\001\002\000\006\051\133\056\uffd6\001\002\000\004" +
    "\056\uffd9\001\002\000\032\005\014\010\004\011\007\014" +
    "\016\016\uffcb\020\021\021\011\034\005\055\010\063\015" +
    "\064\006\065\013\001\002\000\004\016\166\001\002\000" +
    "\040\016\uffc9\033\026\034\032\035\034\036\037\037\040" +
    "\040\035\041\031\042\033\043\036\044\030\045\027\046" +
    "\041\053\162\056\uffc9\001\002\000\030\005\014\010\004" +
    "\011\007\014\016\020\021\021\011\034\005\055\010\063" +
    "\015\064\006\065\013\001\002\000\006\016\uffcc\056\uffcc" +
    "\001\002\000\040\016\uffc9\033\026\034\032\035\034\036" +
    "\037\037\040\040\035\041\031\042\033\043\036\044\030" +
    "\045\027\046\041\053\162\056\uffc9\001\002\000\006\016" +
    "\uffca\056\uffca\001\002\000\070\002\uffe3\006\uffe3\007\uffe3" +
    "\012\uffe3\013\uffe3\015\uffe3\016\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\051" +
    "\uffe3\053\uffe3\056\uffe3\060\uffe3\062\uffe3\001\002\000\006" +
    "\050\171\052\170\001\002\000\004\063\130\001\002\000" +
    "\030\005\014\010\004\011\007\014\016\020\021\021\011" +
    "\034\005\055\010\063\015\064\006\065\013\001\002\000" +
    "\042\015\uffd5\022\uffd5\023\uffd5\024\uffd5\033\026\034\032" +
    "\035\034\036\037\037\040\040\035\041\031\042\033\043" +
    "\036\044\030\045\027\046\041\001\002\000\004\050\174" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\042\015\uffd4\022\uffd4\023\uffd4\024\uffd4\033" +
    "\026\034\032\035\034\036\037\037\040\040\035\041\031" +
    "\042\033\043\036\044\030\045\027\046\041\001\002\000" +
    "\032\005\014\010\004\011\007\014\016\020\021\021\011" +
    "\034\005\055\010\056\uffc7\063\015\064\006\065\013\001" +
    "\002\000\036\033\026\034\032\035\034\036\037\037\040" +
    "\040\035\041\031\042\033\043\036\044\030\045\027\046" +
    "\041\051\203\056\uffc5\001\002\000\004\056\201\001\002" +
    "\000\070\002\ufff9\006\ufff9\007\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\016\ufff9\022\ufff9\023\ufff9\024\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\053\ufff9\056\ufff9" +
    "\060\ufff9\062\ufff9\001\002\000\004\056\uffc8\001\002\000" +
    "\030\005\014\010\004\011\007\014\016\020\021\021\011" +
    "\034\005\055\010\063\015\064\006\065\013\001\002\000" +
    "\036\033\026\034\032\035\034\036\037\037\040\040\035" +
    "\041\031\042\033\043\036\044\030\045\027\046\041\051" +
    "\203\056\uffc5\001\002\000\004\056\uffc6\001\002\000\034" +
    "\006\207\033\026\034\032\035\034\036\037\037\040\040" +
    "\035\041\031\042\033\043\036\044\030\045\027\046\041" +
    "\001\002\000\030\005\014\010\004\011\007\014\016\020" +
    "\021\021\011\034\005\055\010\063\015\064\006\065\013" +
    "\001\002\000\070\002\uffe7\006\uffe7\007\211\012\uffe7\013" +
    "\uffe7\015\uffe7\016\uffe7\022\uffe7\023\uffe7\024\uffe7\033\026" +
    "\034\032\035\034\036\037\037\040\040\035\041\031\042" +
    "\033\043\036\044\030\045\027\046\041\051\uffe7\053\uffe7" +
    "\056\uffe7\060\uffe7\062\uffe7\001\002\000\030\005\014\010" +
    "\004\011\007\014\016\020\021\021\011\034\005\055\010" +
    "\063\015\064\006\065\013\001\002\000\070\002\uffe8\006" +
    "\uffe8\007\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\051\uffe8\053\uffe8\056\uffe8\060\uffe8\062\uffe8\001" +
    "\002\000\004\002\000\001\002\000\004\056\215\001\002" +
    "\000\070\002\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\015" +
    "\ufffd\016\ufffd\022\ufffd\023\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\051\ufffd\053\ufffd\056\ufffd" +
    "\060\ufffd\062\ufffd\001\002\000\004\050\217\001\002\000" +
    "\030\005\014\010\004\011\007\014\016\020\021\021\011" +
    "\034\005\055\010\063\015\064\006\065\013\001\002\000" +
    "\034\012\221\033\026\034\032\035\034\036\037\037\040" +
    "\040\035\041\031\042\033\043\036\044\030\045\027\046" +
    "\041\001\002\000\030\005\014\010\004\011\007\014\016" +
    "\020\021\021\011\034\005\055\010\063\015\064\006\065" +
    "\013\001\002\000\034\013\223\033\026\034\032\035\034" +
    "\036\037\037\040\040\035\041\031\042\033\043\036\044" +
    "\030\045\027\046\041\001\002\000\030\005\014\010\004" +
    "\011\007\014\016\020\021\021\011\034\005\055\010\063" +
    "\015\064\006\065\013\001\002\000\070\002\uffe5\006\uffe5" +
    "\007\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\033\026\034\032\035\034\036\037\037\040" +
    "\040\035\041\031\042\033\043\036\044\030\045\027\046" +
    "\041\051\uffe5\053\uffe5\056\uffe5\060\uffe5\062\uffe5\001\002" +
    "\000\070\002\ufffa\006\ufffa\007\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\053\ufffa\056\ufffa" +
    "\060\ufffa\062\ufffa\001\002\000\034\013\227\033\026\034" +
    "\032\035\034\036\037\037\040\040\035\041\031\042\033" +
    "\043\036\044\030\045\027\046\041\001\002\000\030\005" +
    "\014\010\004\011\007\014\016\020\021\021\011\034\005" +
    "\055\010\063\015\064\006\065\013\001\002\000\070\002" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\033\026\034\032\035\034\036" +
    "\037\037\040\040\035\041\031\042\033\043\036\044\030" +
    "\045\027\046\041\051\uffe6\053\uffe6\056\uffe6\060\uffe6\062" +
    "\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\002\011\013\017\014\016\001\001\000" +
    "\010\002\225\013\017\014\016\001\001\000\010\002\224" +
    "\013\017\014\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\160\013\017\014\016\015\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\205\013\017\014\016\001\001\000\002\001\001" +
    "\000\014\003\107\004\113\005\105\011\106\012\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\056\013\017\014\016\001\001\000\002\001" +
    "\001\000\010\002\024\013\017\014\016\001\001\000\002" +
    "\001\001\000\010\002\054\013\017\014\016\001\001\000" +
    "\010\002\053\013\017\014\016\001\001\000\010\002\052" +
    "\013\017\014\016\001\001\000\010\002\051\013\017\014" +
    "\016\001\001\000\010\002\050\013\017\014\016\001\001" +
    "\000\010\002\047\013\017\014\016\001\001\000\010\002" +
    "\046\013\017\014\016\001\001\000\010\002\045\013\017" +
    "\014\016\001\001\000\010\002\044\013\017\014\016\001" +
    "\001\000\010\002\043\013\017\014\016\001\001\000\010" +
    "\002\042\013\017\014\016\001\001\000\010\002\041\013" +
    "\017\014\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\066\013\017\014\016\001" +
    "\001\000\002\001\001\000\010\002\064\013\017\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\071\013\017\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\074\013\017\014\016\001\001\000\004\021\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\101\013\017\014\016\001\001\000\004\021\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\114\004\113\005\105\011\106\012\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\130\001\001\000\002\001\001" +
    "\000\004\010\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\135\001\001\000\004" +
    "\010\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\152\013" +
    "\017\014\016\001\001\000\004\014\147\001\001\000\002" +
    "\001\001\000\010\002\151\013\017\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\154\001\001" +
    "\000\004\010\155\001\001\000\002\001\001\000\012\002" +
    "\160\013\017\014\016\015\157\001\001\000\002\001\001" +
    "\000\004\016\162\001\001\000\010\002\163\013\017\014" +
    "\016\001\001\000\002\001\001\000\004\016\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\172\001\001\000\010\002\171\013\017\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\174\013\017\014\016\001\001\000\002\001\001\000\012" +
    "\002\176\013\017\014\016\017\177\001\001\000\004\020" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\203\013\017\014\016\001\001\000" +
    "\004\020\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\207\013\017\014\016\001\001\000\002\001" +
    "\001\000\010\002\211\013\017\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\217\013\017\014\016" +
    "\001\001\000\002\001\001\000\010\002\221\013\017\014" +
    "\016\001\001\000\002\001\001\000\010\002\223\013\017" +
    "\014\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\227\013\017\014\016\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    public void report_error(String message, Object info)  {
        System.out.println("Aviso - " + message);
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        System.out.println("Erro! - " + message);
        throw new Exception();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // exp ::= lvalue 
            {
              Object RESULT =null;
		System.out.println("exp => lvalue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= typeid 
            {
              Object RESULT =null;
		System.out.println("exp => lvalue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= NIL 
            {
              Object RESULT =null;
		System.out.println("exp => NIL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= APAR expseq FPAR 
            {
              Object RESULT =null;
		System.out.println("exp => APAR expseq FPAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= INTEIRO 
            {
              Object RESULT =null;
		System.out.println("exp => INTEIRO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= STRING 
            {
              Object RESULT =null;
		System.out.println("exp => STRING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= MENOS exp 
            {
              Object RESULT =null;
		System.out.println("exp => MENOS exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= ID APAR args FPAR 
            {
              Object RESULT =null;
		System.out.println("exp => ID APAR args FPAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp MAIS exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MAIS exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MENOS exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp MULT exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MULT exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp DIV exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp DIV exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp IGUAL exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp IGUAL exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp DIF exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp DIF exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp MENOR exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MENOR exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp MAIOR exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MAIOR exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MENORIGUAL exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MENORIGUAL exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp MAIORIGUAL exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp MAIORIGUAL exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp AND exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		System.out.println("exp => exp OR exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= typeid ACHA ID IGUAL exp idexps FCHA 
            {
              Object RESULT =null;
		System.out.println("exp => typeid ACHA ID IGUAL exp idexps FCHA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= typeid ACOL exp FCOL OF exp 
            {
              Object RESULT =null;
		System.out.println("exp => typeid ACOL exp FCOL OF exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= lvalue ATRIB exp 
            {
              Object RESULT =null;
		System.out.println("exp => lvalue ATRIB exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= typeid ATRIB exp 
            {
              Object RESULT =null;
		System.out.println("exp => lvalue ATRIB exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT =null;
		System.out.println("exp => IF exp THEN exp ELSE exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= IF exp THEN exp 
            {
              Object RESULT =null;
		System.out.println("exp => IF exp THEN exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= WHILE exp DO exp 
            {
              Object RESULT =null;
		System.out.println("exp => WHILE exp DO exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= FOR ID ATRIB exp TO exp DO exp 
            {
              Object RESULT =null;
		System.out.println("exp => FOR ID ATRIB exp TO exp DO exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("exp => BREAK");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LET decs IN expseq END 
            {
              Object RESULT =null;
		System.out.println("exp => LET decs IN expseq END");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decs ::= dec decs 
            {
              Object RESULT =null;
		System.out.println("decs => dec decs");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decs",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decs",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec ::= tydec 
            {
              Object RESULT =null;
		System.out.println("dec => tydec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec ::= vardec 
            {
              Object RESULT =null;
		System.out.println("dec => vardec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec ::= fundec 
            {
              Object RESULT =null;
		System.out.println("dec => fundec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tydec ::= TYPE ID IGUAL ty 
            {
              Object RESULT =null;
		System.out.println("tydec => TYPE ID IGUAL ty");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tydec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ty ::= ID 
            {
              Object RESULT =null;
		System.out.println("ty => ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ty ::= ACHA ID DPONTOS typeid tyfields1 FCHA 
            {
              Object RESULT =null;
		System.out.println("ty => ACOL ID DPONTOS typeid tyfields1 FCOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ty ::= ARRAY OF ID 
            {
              Object RESULT =null;
		System.out.println("ty => ARRAY OF ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tyfields ::= ID DPONTOS typeid tyfields1 
            {
              Object RESULT =null;
		System.out.println("tyfields => ID DPONTOS typeid tyfields1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tyfields",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tyfields ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tyfields",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tyfields1 ::= VIRGULA ID DPONTOS typeid tyfields1 
            {
              Object RESULT =null;
		System.out.println("tyfields1 => VIRGULA ID DPONTOS typeid tyfields1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tyfields1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tyfields1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tyfields1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vardec ::= VAR ID ATRIB exp 
            {
              Object RESULT =null;
		System.out.println("vardec => VAR ID ATRIB exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vardec ::= VAR ID DPONTOS typeid ATRIB exp 
            {
              Object RESULT =null;
		System.out.println("vardec => VAR ID DPONTOS typeid ATRIB exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fundec ::= FUNCTION ID APAR tyfields FPAR IGUAL exp 
            {
              Object RESULT =null;
		System.out.println("fundec => FUNCTION ID APAR tyfields FPAR IGUAL exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fundec ::= FUNCTION ID APAR tyfields FPAR DPONTOS typeid IGUAL exp 
            {
              Object RESULT =null;
		System.out.println("fundec => FUNCTION ID APAR tyfields FPAR DPONTOS typeid IGUAL exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lvalue ::= lvalue PONTO ID 
            {
              Object RESULT =null;
		System.out.println("lvalue => lvalue PONTO ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lvalue ::= lvalue ACOL exp FCOL 
            {
              Object RESULT =null;
		System.out.println("lvalue => lvalue ACOL exp FCOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lvalue ::= typeid PONTO ID 
            {
              Object RESULT =null;
		System.out.println("lvalue => lvalue PONTO ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lvalue ::= typeid ACOL exp FCOL 
            {
              Object RESULT =null;
		System.out.println("lvalue => lvalue ACOL exp FCOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // typeid ::= ID 
            {
              Object RESULT =null;
		System.out.println("typeid => ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeid",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expseq ::= exp expseq1 
            {
              Object RESULT =null;
		System.out.println("expseq => exp expseq1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expseq",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expseq ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expseq",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq1 ::= PVIRGULA exp expseq1 
            {
              Object RESULT =null;
		System.out.println("expseq1 => PVIRGULA exp expseq1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expseq1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expseq1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expseq1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= exp args1 
            {
              Object RESULT =null;
		System.out.println("args => exp args1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args1 ::= VIRGULA exp args1 
            {
              Object RESULT =null;
		System.out.println("args1 => VIRGULA exp args1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args1",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args1",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idexps ::= VIRGULA ID IGUAL exp idexps 
            {
              Object RESULT =null;
		System.out.println("idexps => VIRGULA ID IGUAL exp idexps");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idexps",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // idexps ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idexps",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
